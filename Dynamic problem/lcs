/*
A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. For example, the sequence {A,B,D} is a subsequence of {A,B,C,D,E,F}, obtained after removal of elements C, E and F.

Given two strings A and B of size n and m respectively, you have to print the Longest Common Subsequence(LCS) of strings A and B, where LCS is the longest sequence present in both A and B.

Note: It is gauranteed that there is only one unique longest common subsequence

Input Format
Two strings A and B.

Constraints
1 <= n,m <= 10^3

Output Format
Output the LCS of A and B.

Sample Input
abc
acd
Sample Output
ac*/
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
void lcs(char X[],char Y[])
{
	int m=strlen(X);
	int n=strlen(Y);
	int dp[100][100];
	for(int i=0;i<=m;i++)
	dp[i][0]=0;
	for(int i=0;i<=n;i++)
	dp[0][i]=0;
	int q=0;
	for(int i=1;i<=m;i++)
	{
		q=0;
		for(int j=1;j<=n;j++)
		{
			if(X[i-1]==Y[j-1])
			{
				q=1+dp[i-1][j-1];
			}
			else
			q=max(dp[i-1][j],dp[i][j-1]);
			dp[i][j]=q;
		}
	}
	/*for(int i=0;i<=m;i++)
	{
		for(int j=0;j<=n;j++)
		{
		cout<<dp[i][j]<<" ";
		}
		cout<<endl;
	}*/
	int i=m,j=n;
	string ans="";
	while(i>0 && j>0)
	{
		
		if(X[i-1]==Y[j-1])
		{
			ans=X[i-1]+ans;
			i--;
			j--;
		}
		else if(dp[i-1][j]>dp[i][j-1])
		{
			i--;
		}
		else
		j--;
	}
	cout<<ans;
}
int main() {
	char str1[100],str2[100];
	cin>>str1>>str2;
	lcs(str1,str2);
	return 0;
}
