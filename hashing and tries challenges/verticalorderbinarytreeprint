/*
You will be given a Binary Tree. Your task is to print the binary tree in Vertical Fashion. The image below describes how we define a vertical traversal of a tree.

Input Format
You will be given an Integer N denoting the number of levels in the corresponding tree. On the next line you will be given (2^N)-1 integers denoting the level order input for the tree. If at any level any node is absent then that will denoted by -1 and every integer other than -1 shows the presence of a node at that level.

Constraints
1 <= N <= 10^5

Output Format
Print all nodes of a given column in the same line.

Image

Sample Input
4 
1 2 3 4 5 6 7 -1 -1 -1 -1 -1 8 -1 9 -1 -1 -1 -1
Sample Output
4
2
1 5 6
3 8 
7
9
Explanation
Refer to the image.
We are to simply print the traversal of each vertical level from left to right.*/
#include<iostream>
#include<bits/stdc++.h>
#include <queue> 
using namespace std;
class Node
	{
		public:
		int data;
		Node *left;
		Node *right;
		Node(int d)
		{
			data=d;
			left=right=NULL;
		}

	};
Node *buildtree()
	{
	     queue<Node *>q; 
		int d;
		cin>>d;
		Node *root=new Node(d);
	
		q.push(root);
		int c1,c2;
		while(!q.empty())
		{
		cin>>c1>>c2;
		Node *f=q.front();
		q.pop();
		if(c1!=-1)
		{
		f->left=new Node(c1);
		q.push(f->left);
		}
		if(c2!=-1)
		{
			f->right=new Node(c2);
			q.push(f->right);
		}
		}
		return root;
	}	
void verticalorder(Node *root,int d,map<int, vector<int>> &m)
{
	if(root==NULL)
	return;
	m[d].push_back(root->data);
	verticalorder(root->left,d-1,m);
	verticalorder(root->right,d+1,m);
	return;
}
int main() {
	int level;
	cin>>level;
	map <int,vector<int>> m;
	Node *root=NULL;
	root =buildtree();
	int d=0;
	verticalorder(root,d,m);
	for(auto x:m)
	{
		for(int y:x.second)
		{
			cout<<y<<" ";
		}
		cout<<endl;
	}
	return 0;
}
