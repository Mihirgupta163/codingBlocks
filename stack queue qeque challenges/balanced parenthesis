/*
You are given a string of brackets i.e. '{', '}' , '(' , ')', '[' , ']' . You have to check whether the sequence of parenthesis is balanced or not.
For example, "(())", "(())()" are balanced and "())(", "(()))" are not.

Input Format
A string of '(' , ')' , '{' , '}' and '[' , ']' .

Constraints
1<=|S|<=10^5

Output Format
Print "Yes" if the brackets are balanced and "No" if not balanced.

Sample Input
(())
Sample Output
Yes
Explanation
(()) is a balanced string.*/
#include <iostream>
#include<stack>

using namespace std;
bool Arepair(char opening,char closing)//to check (-)   {-} [] balanced (} not balanced
{
    if(opening=='(' && closing==')')
    return true;
    if(opening=='[' && closing==']')
    return true;
    if(opening=='{' && closing=='}')
    return true;
    return false;// if no condition matched
}
bool checkbalanced(string str)
{
stack<char> s;
for(int i=0;i<str.size();i++)
{

if(str[i]=='('||str[i]=='{'||str[i]=='[')
s.push(str[i]);
else if(str[i]==')'||str[i]==']'||str[i]=='}')
{
    if(s.empty()|| !Arepair(s.top(),str[i]))
    return false;
    else
    s.pop();
}
  
}

return s.empty();
}
int main() {
    string str;
    cin>>str;
  
    if(checkbalanced(str))
    cout<<"true";
    else
    cout<<"false";
    return 0;
   
}
