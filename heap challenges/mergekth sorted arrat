/*
Given K sorted arrays each with N elements merge them and output the sorted array

Input Format
First line contains 2 space separated integers K and N.
K is number of arrays.
N is number of elements in each array.
Next K lines contain N space separated integers each where ith line denotes the element of ith sorted array.

Constraints
Elements of array <= |10^15|
N <= 10^5
K <= 10

Output Format
Single line consisting of space separated numbers

Sample Input
3 4
1 3 5 7
2 4 6 8
0 9 10 11
Sample Output
0 1 2 3 4 5 6 7 8 9 10 11
Explanation
If we were to combine all the arrays into one and then sort it , the output would be as above. */
#include<iostream>
#include<vector>
#include <queue>
using namespace std;
typedef pair<int, pair<int, int>> custompair;
vector<int> mergeksortedarray(vector<vector<int>> arr)
{   vector<int> result; // hold the result
    priority_queue<custompair, vector<custompair>, greater<custompair>> pq;

    for (int i = 0; i < arr.size(); i++)
        pq.push({arr[i][0], {i, 0}}); // insert 0th element in pq
    while (pq.empty() == false)
    {
        custompair curr = pq.top();
        pq.pop();
        int x = curr.second.first;
        int y = curr.second.second;
        result.push_back(curr.first);// insert element to result vector
        if (y + 1 < arr[x].size())
        {
            pq.push({arr[x][y + 1], {x, y + 1}});
        }
    }
    return result;
}
int main()
{
    int k, n;
    cin >> k >> n;
    vector<vector<int>> arr;
    //vector<vector<int>> arr={{2,3,4,5},{3,4,5,7},{1,3,6,9}};
    for (int i = 0; i < k; i++)
    {
        std::vector<int> v;
        for (int j = 0; j < n; j++)
        {
            int temp;
            cin>>temp;
            v.push_back(temp);
        }
        arr.push_back(v);
    }
    vector<int> output = mergeksortedarray(arr);
    for (auto x : output)
        cout << x << " ";
    return 0;
}
